import { getRepository } from 'typeorm';
import { compare } from 'bcryptjs';

import { sign } from 'jsonwebtoken';

import User from '../models/User';


interface RequestDTO {
  email: string;
  password: string;
}

interface Response {
  user: User;
  token: string,
}

class AuthenticateUserService {
  public async execute({ email, password }: RequestDTO): Promise<Response> {
    const usersRepository = getRepository(User);

    const user = await usersRepository.findOne({
      where: { email },
    });

    if (!user) {
      throw new Error('Incorrect email/password combination.');
    }

    // If the user exists:
    // user.password - crypto pass
    // password - passed password, non-crypto
    const passwordMatched = await compare(password, user.password);

    if (!passwordMatched) {
      throw new Error('Incorrect email/password combination.');
    }

    // If it reached until here, the user is authenticate

    // Everythnig that inside of this first parameter is the Payload, not safe.
    // The second parameter is a safe key, auto-generated by md5.cz
    const token = sign({}, '506bef3b7aab55cccd172cd61ca4a897', {
      subject: user.id,
      expiresIn: '1d',
    });

    return {
      user,
      token,
    };
  }
}

export default AuthenticateUserService;
